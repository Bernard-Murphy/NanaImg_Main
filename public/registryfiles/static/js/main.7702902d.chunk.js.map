{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","checkIfEmailInString","text","test","userAction","e","id","target","split","email","document","querySelector","value","role","textContent","console","log","comments","length","fd","FormData","append","axios","post","then","res","window","location","href","catch","err","setState","state","error","registry","roleOptions","label","addEventListener","inputCheck","querySelectorAll","i","input","readOnly","get","data","response","className","this","map","regi","user_id","username","defaultValue","options","type","status_comments","onClick","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7702902d.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\nimport Select from 'react-select';\nimport axios from 'axios';\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      registry: [],\n      error: \"\"\n    }\n    this.roleOptions = [\n      {value: \"Chadmin\", label: \"Chadmin\"},\n      {value: \"Janny\", label: \"Janny\"},\n      {value: \"Verified\", label: \"Verified\"},\n      {value: \"Banned\", label: \"Banned\"}\n    ]\n  }\n\n  componentDidMount(){\n    const html = document.querySelector('html');\n  html.addEventListener('click', () => {\n      let inputCheck = document.querySelectorAll('input');\n      if (inputCheck.length){\n          for (let i = 2; i < inputCheck.length + 3; i++){\n              let input = document.querySelector(`#react-select-${i}-input`);\n              if (input !== null){\n                  input.readOnly = true;\n              }\n          }\n      }\n  })\n    axios.get('https://nanaimg.net/registry')\n      .then(res => {\n        this.setState({\n          ...this.state,\n          registry: [...res.data.response]\n        })\n      })\n      .catch(err => {\n        console.log(err);\n      })\n  }\n\n  checkIfEmailInString = (text) => { \n    var re = /(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))/;\n    return re.test(text);\n}\n\n  userAction = (e) => {\n    let id = e.target.id.split('-')[1];\n    let email = document.querySelector(`#email${id}`).value;\n    let role = document.querySelector(`#role${id} div div div`).textContent;\n    console.log(role);\n    let comments = document.querySelector(`#comments${id}`).value;\n    if (this.checkIfEmailInString(email)){\n      if (email.length < 129){\n        if (comments.length < 512){\n          let fd = new FormData();\n          fd.append('email', email);\n          fd.append('role', role);\n          fd.append('comments', comments);\n          axios.post(`https://nanaimg.net/registry/${id}`, fd)\n            .then(res => {\n              window.location.href = 'https://nanaimg.net/dashboard/registry';\n            })\n            .catch(err => {\n              console.log('an error occurred');\n            })\n        } else {\n          this.setState({\n            ...this.state,\n            error: `${id}-Comments max length exceeded (512 char max)`\n          })\n        }\n      } else {\n        this.setState({\n          ...this.state,\n          error: `${id}-Email max length exceeded (130 char max)`\n        })\n      }\n    } else {\n      this.setState({\n        ...this.state,\n        error: `${id}-Invalid email`\n      })\n    }\n  }\n\n  render(){\n    return(\n      <>\n        <h1 id=\"h1-registry\">Registry</h1>\n        <div id=\"registry-queue-heading\">\n          <h2 className=\"registry-queue-types reg-user\">User</h2>\n          <h2 className=\"registry-queue-types reg-email\">Email</h2>\n          <h2 className=\"registry-queue-types reg-role\">Role</h2>\n          <h2 className=\"registry-queue-types reg-com\">Comments</h2>\n          <h2 className=\"registry-queue-types reg-act\">Actions</h2>\n        </div>\n        {this.state.registry.map((regi) => {\n          return (\n            <div key={regi.user_id} className=\"registry-cards\" id={`reg${regi.user_id}`}>\n              <h2 className=\"registry-data reg-user\">{regi.username}</h2>\n              <div className=\"reg-email\">\n                <input id={`email${regi.user_id}`} className=\"registry-data\" defaultValue={regi.email}/>\n              </div>\n              <Select id={`role${regi.user_id}`} className=\"registry-data reg-role\" options={this.roleOptions} defaultValue={{ label: `${regi.type}`, value: `${regi.type}` }}/>\n              <div className=\"reg-com\">\n                <input id={`comments${regi.user_id}`} className=\"registry-data\" defaultValue={regi.status_comments}/>\n              </div>\n              <div className=\"reg-act\">\n                <button id={`update-${regi.user_id}`} className=\"button-registry\" onClick={this.userAction}>Update</button>\n                {this.state.error.split('-')[0] == regi.user_id ? <p className=\"p-error-registry\">{this.state.error.split('-')[1]}</p> : <></>}\n              </div>\n            </div>\n          )\n        })}\n      </>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}