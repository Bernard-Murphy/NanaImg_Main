{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","toggleExpand","state","posts","length","postNums","document","getElementsByClassName","newPosts","readP","querySelector","i","push","forEach","post","addEventListener","setState","commentText","textContent","expanded","textHandler","e","target","name","value","commentHandler","countClass","cCount","submitComment","errorMessage","fd","FormData","imgId","window","location","pathname","split","append","avatar","message","href","axios","then","res","data","comment_id","error","catch","err","errors","captcha","captchaKey","rendered","id","onClick","this","className","type","placeholder","onChange","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.92c59881.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\nimport axios from 'axios';\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n    this.state = {\n      expanded: false,\n      name: \"\",\n      commentText: \"\",\n      avatar: \"\",\n      countClass: \"black-text\",\n      errors: false,\n      errorMessage: \"\",\n      message: \"\",\n      cCount: 0,\n      posts: [],\n      captcha: false,\n      captchaKey: '',\n      rendered: false\n    }\n  }\n\n  // componentDidUpdate(){\n  //   console.log(this.state)\n  // }\n\n\n  toggleExpand = () => {\n    if (this.state.posts.length === 0){\n      let postNums = document.getElementsByClassName('comment-numbers');\n      let newPosts = [];\n      const readP = document.querySelector('#read-p');\n      for (let i = 0; i < postNums.length; i++){\n        newPosts.push(postNums[i]);\n      }\n      newPosts.forEach((post) => {\n        post.addEventListener('click', () => {\n            this.setState({\n              ...this.state,\n              commentText: `${this.state.commentText}#${post.textContent}`\n            })\n        })\n      })\n      this.setState({\n        ...this.state,\n        expanded: !this.state.expanded,\n        posts: [...newPosts],\n        commentText: (readP.textContent === \"\") ? this.state.commentText : `${this.state.commentText}#${readP.textContent}`\n      })\n    } else {\n      this.setState({\n        ...this.state,\n        expanded: !this.state.expanded\n      })\n    } \n  }\n\n  textHandler = e => {\n    this.setState({\n      ...this.state,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  commentHandler = e => {\n    this.setState({\n      ...this.state,\n      countClass: (e.target.value.length > 10000) ? \"red-text\" : \"black-text\",\n      commentText: e.target.value,\n      cCount: e.target.value.length\n    })\n  }\n\n  submitComment = () => {\n    if (this.state.name.length > 30){\n      this.setState({\n        ...this.state,\n        errorMessage: \"Your name is too long (max: 30 characters)\"\n      })\n    } else if (this.state.commentText.length > 10000){\n      this.setState({\n        ...this.state,\n        errorMessage: \"Your comment is too long (max: 10000 characters)\"\n      })\n    } else if (this.state.commentText.length === 0){\n      this.setState({\n        ...this.state,\n        errorMessage: \"Comment field blank\"\n      })\n    } else {\n      const fd = new FormData();\n      const imgId = window.location.pathname.split('/')[2];\n      fd.append('name', this.state.name);\n      fd.append('commentText', this.state.commentText);\n      fd.append('avatar', this.state.avatar);\n      fd.append('user_id', 0)\n      fd.append('image_id', imgId);\n      // fd.append('image_id', 1);\n      this.setState({\n        ...this.state,\n        errorMessage: \"\",\n        message: \"Sending comment...\"\n      })\n      if (window.location.href.split(':')[0] === 'https'){\n        axios.post('https://nanaimg.net/comments/verified', fd)\n          .then(res => {\n            if (res.data.comment_id){\n              this.setState({\n                ...this.state,\n                message: \"Success! Redirecting...\"\n              })\n              window.location.href = `https://nanaimg.net/success/${imgId}/c${res.data.comment_id}`;\n            } else if (res.data.error){\n              this.setState({\n                ...this.state,\n                message: \"\",\n                errorMessage: res.data.error\n              }) \n            } else {\n              this.setState({\n                ...this.state,\n                message: \"\",\n                errorMessage: \"An error occurred. Please try again.\"\n              })\n            }\n          })\n          .catch(err => {\n            this.setState({\n              ...this.state,\n              message: \"\",\n              errorMessage: \"An error occurred. Please try again.\"\n            })\n          })\n      } else if (window.location.href.split(':')[0] === 'http'){\n        axios.post('http://nanaimg.net/comments/verified', fd)\n          .then(res => {\n            if (res.data.comment_id){\n              this.setState({\n                ...this.state,\n                message: \"Success! Redirecting...\"\n              })\n              window.location.href = `https://nanaimg.net/success/${imgId}/c${res.data.comment_id}`;\n            } else if (res.data.error){\n              this.setState({\n                ...this.state,\n                message: \"\",\n                errorMessage: res.data.error\n              }) \n            } else {\n              this.setState({\n                ...this.state,\n                message: \"\",\n                errorMessage: \"An error occurred. Please try again.\"\n              })\n            }\n          })\n          .catch(err => {\n            this.setState({\n              ...this.state,\n              message: \"\",\n              errorMessage: \"An error occurred. Please try again.\"\n            })\n          })\n      } else {\n        axios.post('https://nanaimg.net/comments/verified', fd)\n          .then(res => {\n            if (res.data.comment_id){\n              this.setState({\n                ...this.state,\n                message: \"Success! Redirecting...\"\n              })\n              window.location.href = `https://nanaimg.net/success/${imgId}/c${res.data.comment_id}`;\n            } else if (res.data.error){\n              this.setState({\n                ...this.state,\n                message: \"\",\n                errorMessage: res.data.error\n              }) \n            } else {\n              this.setState({\n                ...this.state,\n                message: \"\",\n                errorMessage: \"An error occurred. Please try again.\"\n              })\n            }\n          })\n          .catch(err => {\n            this.setState({\n              ...this.state,\n              message: \"\",\n              errorMessage: \"An error occurred. Please try again.\"\n            })\n          })\n      } \n      \n    }\n  }\n\n\n  render(){\n    return (\n      <div id=\"comment-form\">\n      <button onClick={this.toggleExpand} id=\"add-a-comment\">Add a comment</button>\n      {this.state.expanded ? <div id=\"expanded-comment-form\"><div className=\"option\"><label className=\"options-label\">Name: </label><input className=\"options-input\" type=\"text\" name=\"name\" placeholder=\"30 chars max (optional)\" value={this.state.name} onChange={this.textHandler}/></div><br/>\n      <div className=\"option\"><label className=\"options-label\">Text: </label><textarea id=\"comment-textarea\" className=\"options-input\" type=\"text\" name=\"commentText\" placeholder=\"Enter Text (required)\" value={this.state.commentText} onChange={this.commentHandler}></textarea><p id=\"char-count\"><span className={this.state.countClass}>{this.state.cCount}</span>/10000</p></div><br/>\n      <div className=\"option\"><label className=\"options-label\">Avatar: </label><input className=\"options-input\" type=\"text\" name=\"avatar\" placeholder=\"Image number (optional)\" value={this.state.avatar} onChange={this.textHandler}/></div><br/>\n      <button id=\"comment-submit-button\" onClick={this.submitComment}>Submit</button></div> : <div></div>}\n      {this.state.errorMessage === \"\" ? <p></p> : <p id=\"comment-error-message\">{this.state.errorMessage}</p>}\n      {this.state.message === \"\" ? <p></p> : <p id=\"comment-upload-message\">{this.state.message}</p>}\n    </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}