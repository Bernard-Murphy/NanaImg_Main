{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","recaptchaVerified","res","setState","state","captcha","captchaKey","toggleExpand","posts","length","postNums","document","getElementsByClassName","newPosts","readP","querySelector","i","push","forEach","post","addEventListener","commentText","textContent","expanded","textHandler","e","target","name","value","commentHandler","countClass","cCount","submitComment","errorMessage","fd","FormData","imgId","window","location","pathname","split","append","avatar","message","href","axios","then","data","comment_id","error","catch","err","errors","rendered","id","onClick","this","className","type","placeholder","onChange","sitekey","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.5c4aaf51.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\nimport axios from 'axios';\nimport Recaptcha from 'react-google-recaptcha';\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n    this.state = {\n      expanded: false,\n      name: \"\",\n      commentText: \"\",\n      avatar: \"\",\n      countClass: \"black-text\",\n      errors: false,\n      errorMessage: \"\",\n      message: \"\",\n      cCount: 0,\n      posts: [],\n      captcha: false,\n      captchaKey: '',\n      rendered: false\n    }\n  }\n\n  // componentDidUpdate(){\n  //   console.log(this.state)\n  // }\n\n  recaptchaVerified = (res) => {\n    if (res){\n      this.setState({\n        ...this.state,\n        captcha: true,\n        captchaKey: res\n      })\n    } else {\n      this.setState({\n        ...this.state,\n        captcha: false\n      })\n    }\n  }\n\n  toggleExpand = () => {\n    if (this.state.posts.length === 0){\n      let postNums = document.getElementsByClassName('comment-numbers');\n      let newPosts = [];\n      const readP = document.querySelector('#read-p');\n      for (let i = 0; i < postNums.length; i++){\n        newPosts.push(postNums[i]);\n      }\n      newPosts.forEach((post) => {\n        post.addEventListener('click', () => {\n            this.setState({\n              ...this.state,\n              commentText: `${this.state.commentText}#${post.textContent}`\n            })\n        })\n      })\n      this.setState({\n        ...this.state,\n        expanded: !this.state.expanded,\n        posts: [...newPosts],\n        commentText: (readP.textContent === \"\") ? this.state.commentText : `${this.state.commentText}#${readP.textContent}`\n      })\n    } else {\n      this.setState({\n        ...this.state,\n        expanded: !this.state.expanded\n      })\n    } \n  }\n\n  textHandler = e => {\n    this.setState({\n      ...this.state,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  commentHandler = e => {\n    this.setState({\n      ...this.state,\n      countClass: (e.target.value.length > 10000) ? \"red-text\" : \"black-text\",\n      commentText: e.target.value,\n      cCount: e.target.value.length\n    })\n  }\n\n  submitComment = () => {\n    if (this.state.name.length > 30){\n      this.setState({\n        ...this.state,\n        errorMessage: \"Your name is too long (max: 30 characters)\"\n      })\n    } else if (this.state.commentText.length > 10000){\n      this.setState({\n        ...this.state,\n        errorMessage: \"Your comment is too long (max: 10000 characters)\"\n      })\n    } else if (this.state.commentText.length === 0){\n      this.setState({\n        ...this.state,\n        errorMessage: \"Comment field blank\"\n      })\n    } else if (this.state.captcha === false){\n      this.setState({\n        ...this.state,\n        errorMessage: \"Please solve the Captcha\"\n      })\n    } else {\n      const fd = new FormData();\n      const imgId = window.location.pathname.split('/')[2];\n      fd.append('name', this.state.name);\n      fd.append('commentText', this.state.commentText);\n      fd.append('avatar', this.state.avatar);\n      fd.append('user_id', 0)\n      fd.append('image_id', imgId);\n      fd.append('captcha', this.state.captchaKey);\n      // fd.append('image_id', 1);\n      this.setState({\n        ...this.state,\n        errorMessage: \"\",\n        message: \"Sending comment...\"\n      })\n      if (window.location.href.split(':')[0] === 'https'){\n        axios.post('https://nanaimg.net/comments', fd)\n          .then(res => {\n            if (res.data.comment_id){\n              this.setState({\n                ...this.state,\n                message: \"Success! Redirecting...\"\n              })\n              window.location.href = `https://nanaimg.net/success/${imgId}/c${res.data.comment_id}`;\n            } else if (res.data.error){\n              this.setState({\n                ...this.state,\n                message: \"\",\n                errorMessage: res.data.error\n              }) \n            } else {\n              this.setState({\n                ...this.state,\n                message: \"\",\n                errorMessage: \"An error occurred. Please try again.\"\n              })\n            }\n          })\n          .catch(err => {\n            this.setState({\n              ...this.state,\n              message: \"\",\n              errorMessage: \"An error occurred. Please try again.\"\n            })\n          })\n      } else if (window.location.href.split(':')[0] === 'http'){\n        axios.post('http://nanaimg.net/comments', fd)\n          .then(res => {\n            if (res.data.comment_id){\n              this.setState({\n                ...this.state,\n                message: \"Success! Redirecting...\"\n              })\n              window.location.href = `https://nanaimg.net/success/${imgId}/c${res.data.comment_id}`;\n            } else if (res.data.error){\n              this.setState({\n                ...this.state,\n                message: \"\",\n                errorMessage: res.data.error\n              }) \n            } else {\n              this.setState({\n                ...this.state,\n                message: \"\",\n                errorMessage: \"An error occurred. Please try again.\"\n              })\n            }\n          })\n          .catch(err => {\n            this.setState({\n              ...this.state,\n              message: \"\",\n              errorMessage: \"An error occurred. Please try again.\"\n            })\n          })\n    } else {\n      axios.post('http://nanaimg.net/comments', fd)\n        .then(res => {\n          if (res.data.comment_id){\n            this.setState({\n              ...this.state,\n              message: \"Success! Redirecting...\"\n            })\n            window.location.href = `https://nanaimg.net/success/${imgId}/c${res.data.comment_id}`;\n          } else if (res.data.error){\n            this.setState({\n              ...this.state,\n              message: \"\",\n              errorMessage: res.data.error\n            }) \n          } else {\n            this.setState({\n              ...this.state,\n              message: \"\",\n              errorMessage: \"An error occurred. Please try again.\"\n            })\n          }\n        })\n        .catch(err => {\n          this.setState({\n            ...this.state,\n            message: \"\",\n            errorMessage: \"An error occurred. Please try again.\"\n          })\n        })\n    }\n    }\n  }\n\n\n  render(){\n    return (\n      <div id=\"comment-form\">\n      <button onClick={this.toggleExpand} id=\"add-a-comment\">Add a comment</button>\n      {this.state.expanded ? <div id=\"expanded-comment-form\"><div className=\"option\"><label className=\"options-label\">Name: </label><input className=\"options-input\" type=\"text\" name=\"name\" placeholder=\"30 chars max (optional)\" value={this.state.name} onChange={this.textHandler}/></div><br/>\n      <div className=\"option\"><label className=\"options-label\">Text: </label><textarea id=\"comment-textarea\" className=\"options-input\" type=\"text\" name=\"commentText\" placeholder=\"Enter Text (required)\" value={this.state.commentText} onChange={this.commentHandler}></textarea><p id=\"char-count\"><span className={this.state.countClass}>{this.state.cCount}</span>/10000</p></div><br/>\n      <div className=\"option\"><label className=\"options-label\">Avatar: </label><input className=\"options-input\" type=\"text\" name=\"avatar\" placeholder=\"Image number (optional)\" value={this.state.avatar} onChange={this.textHandler}/></div><br/>\n      <div id=\"recaptcha-comment\">\n        <Recaptcha\n          sitekey=\"6LdiLvoZAAAAAI5d2nIWtZE5_abJFgGBJZNmepJK\"\n          onChange={this.recaptchaVerified}\n        />\n      </div>\n      <button id=\"comment-submit-button\" onClick={this.submitComment}>Submit</button></div> : <div></div>}\n      {this.state.errorMessage === \"\" ? <p></p> : <p id=\"comment-error-message\">{this.state.errorMessage}</p>}\n      {this.state.message === \"\" ? <p></p> : <p id=\"comment-upload-message\">{this.state.message}</p>}\n    </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}